apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

apply from: '../dependencies.gradle'

def dataProperties = new Properties()
dataProperties.load(new FileInputStream(rootProject.file("../movie-keys/data.properties")))

def signinProperties = new Properties()
signinProperties.load(new FileInputStream(rootProject.file("../movie-keys/signin.properties")))

android {
    signingConfigs {
        release {
            keyAlias "${signinProperties['KeyAlias']}"
            keyPassword "${signinProperties['KeyPassword']}"
            storeFile file("${signinProperties['StoreFile']}")
            storePassword "${signinProperties['StorePassword']}"
        }
    }

    compileSdk versions.compileSdk
    defaultConfig {
        applicationId "com.movie.android"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    composeOptions {
        kotlinCompilerExtensionVersion versions.composeVersion
    }

    kotlinOptions {
        jvmTarget = '11'
        useIR = true
    }

    buildFeatures {
        compose true
    }

    kapt {
        correctErrorTypes = true
    }

    sourceSets {
        test.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    flavorDimensions "services"
    productFlavors {
        prod {
            dimension "services"

            resValue "string", "app_name", "MoviePlay"
            resValue "string", "account_type", "com.movie.android"

            buildConfigField("String", "DomainApi", "\"${dataProperties['DomainApi']}\"")
            buildConfigField("String", "ApiKey", "\"${dataProperties['ApiKey']}\"")
            buildConfigField("String", "GoogleApiKey", "\"${dataProperties['GoogleApiKey']}\"")
        }
        qa {
            dimension "services"
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"

            resValue "string", "app_name", "MoviePlay Debug"
            resValue "string", "account_type", "com.movie.android.debug"

            buildConfigField("String", "DomainApi", "\"${dataProperties['DevDomainApi']}\"")
            buildConfigField("String", "ApiKey", "\"${dataProperties['ApiKey']}\"")
            buildConfigField("String", "GoogleApiKey", "\"${dataProperties['GoogleApiKey']}\"")
        }
        staging {
            dimension "services"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"

            resValue "string", "app_name", "MoviePlay Staging"
            resValue "string", "account_type", "com.movie.android.staging"

            buildConfigField("String", "DomainApi", "\"${dataProperties['StagingDomainApi']}\"")
            buildConfigField("String", "ApiKey", "\"${dataProperties['ApiKey']}\"")
            buildConfigField("String", "GoogleApiKey", "\"${dataProperties['GoogleApiKey']}\"")
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.animation.ExperimentalAnimationApi"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.material.ExperimentalMaterialApi"]
    }
}

dependencies {
    // material
    implementation "com.google.android.material:material:$versions.materialVersion"

    // compose
    implementation "androidx.compose.ui:ui:$versions.composeVersion"
    implementation "androidx.activity:activity-compose:$versions.activityVersion"
    implementation "androidx.compose.material:material:$versions.composeVersion"
    implementation "androidx.compose.material:material-icons-extended:$versions.composeVersion"
    implementation "androidx.compose.foundation:foundation:$versions.composeVersion"
    implementation "androidx.compose.foundation:foundation-layout:$versions.composeVersion"
    implementation "androidx.compose.animation:animation:$versions.composeVersion"
    implementation "androidx.compose.runtime:runtime:$versions.composeVersion"
    implementation "androidx.compose.runtime:runtime-livedata:$versions.composeVersion"
    implementation "androidx.navigation:navigation-compose:$versions.composeNavVersion"
    implementation "androidx.compose.ui:ui-tooling:$versions.composeVersion"
    implementation "androidx.constraintlayout:constraintlayout-compose:$versions.constraintVersion"

    // compose insets
    implementation "com.google.accompanist:accompanist-insets:$versions.accompanistVersion"
    implementation "com.google.accompanist:accompanist-flowlayout:$versions.accompanistVersion"

    implementation "io.coil-kt:coil-compose:$versions.coil"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"
    testImplementation "androidx.arch.core:core-testing:$versions.archCompomentVersion"

    // hilt
    implementation "com.google.dagger:hilt-android:$versions.hiltCoreVersion"
    implementation "androidx.hilt:hilt-navigation-compose:$versions.hiltComposeNavigation"
    kapt "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hiltCoreVersion"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"

    // network
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion"

    // swipeRefresh
    implementation "com.google.accompanist:accompanist-swiperefresh:$versions.accompanistVersion"

    // moshi
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    implementation "com.squareup.moshi:moshi-adapters:$versions.moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshi"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.converterMoshi"

    // collapsing toolbar
    implementation "me.onebone:toolbar-compose:$versions.collapsingVersion"

    implementation "com.github.skydoves:landscapist-coil:$versions.landscapistVersion"
    implementation "com.google.accompanist:accompanist-coil:0.13.0"

    // sandwich
    implementation "com.github.skydoves:sandwich:$versions.sandwichVersion"

    // unit test
    testImplementation "junit:junit:$versions.junitVersion"
    testImplementation "androidx.test:core:$versions.androidxTest"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-inline:$versions.mockitoInlineVersion"
    testImplementation "app.cash.turbine:turbine:$versions.turbineVersion"
    testImplementation "org.robolectric:robolectric:$versions.robolectricVersion"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$versions.composeVersion"
    androidTestImplementation "com.google.truth:truth:$versions.truthVersion"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJunit"
    androidTestImplementation "com.android.support.test:runner:$versions.androidTestRunner"
}